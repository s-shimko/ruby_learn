# encoding: utf-8
#
# Игра: угадай слово по шаблону
# Пример использования регулярных выражений
#
# (с) goodprogrammer.ru

# XXX/ Этот код необходим только при использовании русских букв на Windows
if (Gem.win_platform?)
  Encoding.default_external = Encoding.find(Encoding.locale_charmap)
  Encoding.default_internal = __ENCODING__

  [STDIN, STDOUT].each do |io|
    io.set_encoding(Encoding.default_external, Encoding.default_internal)
  end
end
# /XXX

# Подключаем файл с двумя вспомогательными методами
require_relative 'methods.rb'

# Получаем произвольный шаблон, строку вида "ск.т"
# с помощью одного из вспомогательных методов
regexp_string = get_random_regexp_string

# Выводим пользователю условия игры
# и рассказываем, как закончить игру
puts "Придумайте как можно больше слов, " \
     "содержащих шаблон '#{regexp_string.gsub('.', '*')}'"
puts "Для выхода наберите X"

# В этой переменной будет количество очков пользователя
# — количество реально существующих слов, подходящих под шаблон
count = 0

# Основной цикл игры
loop do
  # Спроашиваем у пользователя ввод
  word = STDIN.gets.chomp

  # Если пользователь ввел X или x — выходим из игры
  if word.downcase == 'x'
    break
  end

  # Проверяем, существует ли такое слово в языке
  # с помощью вспомогтаельного метода
  if word_exists?(word)
    # Если существует, смотрим, подходит ли оно под шаблон
    # Для этого формируем из строки-шаблона регулярное выражение
    if word =~ /#{regexp_string}/
      # Если слово подходит, игроку засчитываем очко
      puts '.. OK =)'
      count += 1
    else
      # Если не подходит, не засчитываем
      puts '.. неа =('
    end
  else
    # Если такого слова в русском языке нет, пишем об этом
    puts 'Нет такого слова в Викисловаре'
  end
end

# Выводим пользователю его счет
puts "Игра закончена, ваш счет: #{count}"
